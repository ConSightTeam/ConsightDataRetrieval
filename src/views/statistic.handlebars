<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-9">
                    <h1 class="m-0 text-dark"><i class="nav-icon fas fa-tachometer-alt"></i> {{ display_property }} Statistic</h1>
                </div><!-- /.col -->
                <div class="col-sm-3">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="./">Home</a></li>
                        <li class="breadcrumb-item active">{{ display_property }} Statistic</li>
                    </ol>
                </div><!-- /.col -->
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </div>
    <!-- /.content-header -->

    <!-- Main content -->
    <div class="row mb-2">
    <div class="col-sm-10">
    <div id="AverageCard" class="card card-dark">
      <div class="card-header">
        <h3 class="card-title">{{ display_property }} Average</h3>
      </div>     
      <div class="card-body">
        <div class="chart">
          <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%; display: block; width: 607px;" width="607" height="250" class="chartjs-render-monitor"></canvas>        
        </div>
      </div>
      <div class="card-footer text-center">
        <a href="#DetailsCard">View Details</a>
      </div>
    </div>
    </div>
    <div class="col-sm-2">
        <div class="form-group">
            <div class="input-group date" id="StatisticDateTimePicker" data-target-input="nearest">
                <input type="text" class="form-control datetimepicker-input" data-target="#StatisticDateTimePicker"/>
                <div class="input-group-append" data-target="#StatisticDateTimePicker" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
            </div>
        </div>
      <a type="button" href="./hour" class="btn btn-block btn-primary">Hour</a>
      <a type="button" href="./day" class="btn btn-block btn-primary">Day</a>
      <a type="button" href="./month" class="btn btn-block btn-primary">Month</a>
      <blockquote>
        <p><b>Note:</b> The <code>average</code> is calculated by all node available in each unit of time.</p>
      </blockquote>
    </div>
    </div>
    <div>
        {{#unless statistics}}
          <p>No Data</p>
        {{/unless}}
        <div class="row">
          <div class="col-12">
            <div id="DetailsCard" class="card card-dark">
              <div class="card-header">
                <h3 class="card-title">Details</h3>
                <div class="card-tools">
                <div class="input-group input-group-sm">
                   <a href="{{mode}}/export" class="btn btn-sm btn-primary float-left">Export to CSV file</a>
                </div>
              </div>
              </div>
              <div class="card-body table-responsive p-0">
                <table class="table table-hover text-nowrap">
                  <thead>
                    <tr>
                      <th width="5%">#</th>
                      <th width="45%">Date</th>
                      <th>Minimum</th>
                      <th>Maximum</th>
                      <th>Average</th>
                    </tr>
                  </thead>
                  <!-- The data in each row is manipulated by dataInTable function in Javascript below -->
                  <tbody id="TableRow">
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
    </div>
</div>

<script src="/plugins/jquery/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.25.3/moment.min.js"></script>
<script src="/js/datepicker.js"></script>
<script>
  // Manipulate data in the table, change from default format to human-readable format.
  function formatIndexValue(num){
    return num + 1;
  }

  function formatAverageValue(num){
    return num.toFixed(2);
  }

  function formatTimestamp(txt){
    res = txt.split(" ");
    new_text = res[1] + " " + res[2] + " " + res[3] + " " + res[4] + " " + res[5];
    return new_text 
  }

  function formatTimestampDay(txt){
    res = txt.split(" ");
    new_text = res[1] + " " + res[2] + " " + res[3];
    return new_text 
  }

  function formatTimestampHour(txt){
    res = txt.split(" ");
    //new_text = res[1] + " " + res[2] + " " + res[3];
    timeHHMMSS = res[4].split(":");
    timeHHMMSS = timeHHMMSS[0] + ":" + timeHHMMSS[1];
    new_text = res[1] + " " + res[2] + " " + res[3] + "&ensp;(" + timeHHMMSS + ")";
    return new_text
  }

  function formatTimestampMonth(txt){
    res = txt.split(" ");
    new_text = res[1] + " " + res[3];
    return new_text 
  }

  dataInTable = '';

  {{#each statistics}}
    dataInTable += '<tr><td>' + formatIndexValue({{ @index }});
    if (window.location.href.indexOf("day") > -1) {
      dataInTable += '<td>' + formatTimestampDay("{{this.inserted_on_date}}") + '</td>';
    } else if (window.location.href.indexOf("hour") > -1) {
      dataInTable += '<td>' + formatTimestampHour("{{this.inserted_on_date}}") + '</td>';
    } else if (window.location.href.indexOf("month") > -1) {
      dataInTable += '<td>' + formatTimestampMonth("{{this.inserted_on_date}}") + '</td>';
    } else {
      dataInTable += '<td>' + formatTimestamp("{{this.inserted_on_date}}") + '</td>';
    }
    dataInTable += '<td>{{ this.minimum }}</td><td>{{ this.maximum }}</td><td>';
    dataInTable += formatAverageValue({{ this.average }}) + '</td></tr>';
  {{/each}}

  // Insert the manipulated data in HTML (id = TableRow)
  document.getElementById('TableRow').innerHTML = dataInTable;
</script>
<script src="/plugins/chart.js/Chart.min.js"></script>
<script>
  chart_average_data = []
  chart_max_data = []
  chart_min_data = []
  chart_labels = []
  unit = "";

  function formatTimestamp(txt){
    res = txt.split(" ");
    new_text = res[1] + " " + res[2] + " " + res[3] + " " + res[4] + " " + res[5];
    return new_text 
  }

  {{#each statistics}}
    chart_labels.push(formatTimestamp("{{this.inserted_on_date}}"));
    chart_average_data.push({{this.average}}.toFixed(2));
    chart_min_data.push({{this.minimum}});
    chart_max_data.push({{this.maximum}});
    unit = "{{this.unit}}";
  {{/each}}

  chart_average_data = chart_average_data.reverse()
  chart_max_data = chart_max_data.reverse()
  chart_min_data = chart_min_data.reverse()
  chart_labels = chart_labels.reverse()

  // Line chart
  var lineChartData = {
  labels  : chart_labels,
  datasets: [
      {
        label               : 'Minimum',
        fill                : false,
        backgroundColor     : '#ced4da',
        borderColor         : '#ced4da',
        pointColor          : '#3b8bba',
        pointStrokeColor    : 'rgba(60,141,188,1)',
        pointHighlightFill  : '#fff',
        pointHighlightStroke: 'rgba(60,141,188,1)',
        data                : chart_min_data
      },
      {
        label               : 'Average',
        fill                : false,
        backgroundColor     : '#007bff',
        borderColor         : '#007bff',
        pointColor          : '#007bff',
        pointStrokeColor    : 'rgba(60,141,188,1)',
        pointHighlightFill  : '#fff',
        pointHighlightStroke: 'rgba(60,141,188,1)',
        data                : chart_average_data
      },
      {
        label               : 'Maximum',
        fill                : false,
        backgroundColor     : '#6610f2',
        borderColor         : '#6610f2',
        pointColor          : '#6610f2',
        pointStrokeColor    : '#c1c7d1',
        pointHighlightFill  : '#fff',
        pointHighlightStroke: 'rgba(220,220,220,1)',
        data                : chart_max_data
      }]
    }

  var lineChartOptions = {
    maintainAspectRatio : false,
    responsive : true,
    legend: {
      display: true
    },
    tooltips: {
      mode: 'index',
      intersect: false,
    },
    hover: {
      mode: 'nearest',
      intersect: true
    },
    scales: {
      xAxes: [{
        scaleLabel: {
          display: true,
          labelString: 'time' + " (" + ")" // Insert the mode here
        },
        ticks : {
          display : false,
        },
      }],
      yAxes: [{
        scaleLabel: {
          display: true,
          stacked: true,
          labelString: "{{ display_property }}" + " (" + unit + ")" // Insert the unit here
        },
      }]
    }
  }

  // Initialize Line chart
  var line_ctx = document.getElementById('lineChart').getContext('2d');
  var lineChart = new Chart(line_ctx, { 
    type: 'line',
    data: lineChartData, 
    options: lineChartOptions
  });
</script>